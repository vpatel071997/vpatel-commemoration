{"version":3,"sources":["main.19a2ad31.chunk.css","Sharis-Regular.css","components/header.scss","breakpoints.scss","varibles.scss","components/banner.scss","App.scss"],"names":[],"mappings":"AAAA,8FAA8F,CCAjE,WACzB,oBAAqB,CACrB,uEACA,CAAA,gWAMkC,CAAA,iBAAA,CAAA,eAAA,CAAA,iCAAA,CCTtC,QACE,cAAe,CACf,eAAgB,CAChB,UAAW,CACX,WAAY,CACZ,2BAA4B,CAC5B,SAAU,CACV,qBAAuB,CACvB,UAAY,CACZ,UAAW,CCqGX,yBD9GF,QAWI,UAAW,CAiBd,CA5BD,cAcI,UAAW,CACX,gBAAiB,CC+FnB,yBD9GF,cAiBM,gBAAiB,CACjB,SAAU,CASb,CA3BH,gBAqBM,gBAAiB,CACjB,oBAAsB,CACtB,UEvBS,CFwBT,oBAAqB,CACrB,eAAgB,CACjB,MGxBH,YAAkC,CAAlC,+BAAkC,CAClC,qBDFa,CCGb,eAAgB,CAJlB,WAMI,qBAAsB,CACtB,sBAAuB,CFuGzB,yBE9GF,WASM,qBAAsB,CA0EzB,CAnFH,cAYM,eAAgB,CAChB,aAAc,CACd,eAAgB,CAChB,UAAW,CACX,UDfS,CCgBT,yBAA0B,CF6F9B,yBE9GF,cAmBQ,gBAAiB,CACjB,aAAc,CAajB,CAjCL,oBAuBQ,UAAW,CACX,iBAAkB,CAClB,eAAgB,CFqFtB,yBE9GF,oBA2BU,UAAW,CAKd,CAhCP,yBA8BU,iBAAkB,CA9B5B,oBAmCM,qBDlCS,CCmCT,UAAY,CACZ,WAAY,CACZ,eAAgB,CAChB,iBAAkB,CAClB,SAAU,CACV,qDAAyD,CFqE7D,yBE9GF,oBA2CQ,cAAiB,CACjB,UAAW,CAKd,CAjDL,sBA+CQ,eAAgB,CA/CxB,iBAmDM,eDnDS,CCoDT,iBAAkB,CAClB,UAAW,CACX,YAAa,CACb,WAAY,CACZ,OAAQ,CACR,QAAS,CAzDf,mCA4DU,UAAY,CFkDpB,yBE9GF,iBAgEQ,WAAY,CACZ,WAAY,CAiBf,CAlFL,6BAoEQ,KAAM,CACN,MAAO,CACP,UAAW,CACX,WAAY,CACZ,eAAgB,CAChB,iBAAkB,CAClB,WAAa,CACb,2CAAoD,CA3E5D,iCA6EU,WAAY,CACZ,UAAW,CACX,gBAAiB,CCtE3B,UAEE,iBAAkB,CAClB,wBAAiB,CAAjB,qBAAiB,CAAjB,oBAAiB,CAAjB,gBAAiB,CACjB,eFZa,CEab,wBAAyB,CAAzB,wBAAyB,CACzB,QAAS,CACT,4JAE8B,CAC9B,kCAAmC,CACnC,iCAAkC,CACnC,WAGC,WAAY,CACZ,eAAgB,CAChB,aAAc,CACd,WAAY,CAJd,gBAMI,YAAa,CACb,WAAY,CACZ,cAAe,CAIhB,yBAZH,gBAUM,cAAe,CAElB,CAZH,qBAcI,kBAAmB,CAdvB,0BAiBI,6BAA8B,CAC/B,iBAID,UAAW,CACX,WAAY,CAFd,sBAII,YAAa,CACb,WAAY,CACb,oBAMC,eAAgB,CAEhB,YAAkC,CAAlC,+BAAkC,CAClC,iBAAkB,CAClB,UAAW,CACX,SAAU,CAPd,iCASM,iBAAkB,CAClB,WAAY,CACZ,WAAY,CACZ,eFlES,CEmET,QAAS,CACT,MAAO,CACP,OAAQ,CACT,KAKH,SAAU,CACV,uBAAwB,CACxB,iBAAkB,CACnB,MAGC,YAAa,CACb,UAAW,CACX,eFlFa,CE+Ef,WAKI,YAAa,CACb,kBAAmB","file":"main.19a2ad31.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css?family=Josefin+Sans:300,400,600,700&display=swap);\n@font-face{font-family:'Sharis';src:url(/vpatel-commemoration/static/media/Sharis-Regular.d670d413.eot);src:url(/vpatel-commemoration/static/media/Sharis-Regular.d670d413.eot) format(\"embedded-opentype\"),url(/vpatel-commemoration/static/media/Sharis-Regular.4623897f.woff) format(\"woff\"),url(/vpatel-commemoration/static/media/Sharis-Regular.9eec4fb7.ttf) format(\"truetype\"),url(/vpatel-commemoration/static/media/Sharis-Regular.79f6127e.svg) format(\"svg\");font-style:normal;font-weight:normal;text-rendering:optimizeLegibility}\n\n.header{position:fixed;overflow:hidden;width:50vw;height:15vh;transform:translateY(-15vh);z-index:4;background-color:black;color:white;opacity:.9}@media (max-width: 768px){.header{width:80vw}}.header .logo{width:45vw;text-align:right}@media (max-width: 768px){.header .logo{text-align:right;width:70%}}.header .logo a{font-size:1.2rem;letter-spacing:0.5rem;color:#000;text-decoration:none;font-weight:500}.main{height:100vh;height:calc(1vh * 100);height:calc(var(--vh, 1vh) * 100);background-color:#fff;overflow:hidden}.main .row{flex-direction:column;justify-content:center}@media (max-width: 768px){.main .row{justify-content:start}}.main .row h2{margin-top:30vh;font-size:9vw;font-weight:100;z-index:10;color:#fff;mix-blend-mode:difference}@media (max-width: 768px){.main .row h2{margin-top:200px;font-size:8vw}}.main .row h2 .line{height:9vw;position:relative;overflow:hidden}@media (max-width: 768px){.main .row h2 .line{height:8vw}}.main .row h2 .line span{position:absolute}.main .row .btn-row{background-color:#fff;opacity:0.5;width:256px;text-align:left;position:relative;z-index:2;font-family:\"Josefin Sans\", Arial, Helvetica, sans-serif}@media (max-width: 768px){.main .row .btn-row{padding:0px 20px;width:50vw}}.main .row .btn-row p{line-height:1.4}.main .row .case{background:#000;position:absolute;width:50vw;height:100vh;float:right;right:0;bottom:0}.main .row .case:hover .case-image{opacity:0.9}@media (max-width: 768px){.main .row .case{width:100vw;height:50vh}}.main .row .case .case-image{top:0;left:0;width:100%;height:100%;overflow:hidden;position:absolute;opacity:0.65;transition:0.4s cubic-bezier(0.6, -0.05, 0.1, 0.99)}.main .row .case .case-image img{height:100%;width:100%;object-fit:cover}body,html{visibility:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background:#fff;-ms-scroll-chaining:none;overscroll-behavior:none;margin:0;font-family:\"Sharis\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.container{width:100vw;min-width:100vw;margin:0 auto;height:100%}.container .row{display:flex;height:100%;padding:0 32px}@media (max-width: 768px){.container .row{padding:0 16px}}.container .v-center{align-items:center}.container .space-between{justify-content:space-between}.container-fluid{width:100%;height:100%}.container-fluid .row{display:flex;height:100%}.intro-overlay .top{overflow:hidden;height:100vh;height:calc(1vh * 100);height:calc(var(--vh, 1vh) * 100);position:absolute;width:100%;z-index:8}.intro-overlay .top .overlay-top{position:absolute;height:100%;width:100vw;background:#000;bottom:0;left:0;right:0}.App{z-index:2;transform:translateY(0);position:relative}.page{height:100vh;width:100%;background:#fff}.page .row{display:flex;align-items:center}\n\n","/* Webfont: Sharis-Regular */@font-face {\r\n    font-family: 'Sharis';\r\n    src: url('Sharis-Regular.eot'); /* IE9 Compat Modes */\r\n    src: url('Sharis-Regular.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\r\n         url('Sharis-Regular.woff') format('woff'), /* Modern Browsers */\r\n         url('Sharis-Regular.ttf') format('truetype'), /* Safari, Android, iOS */\r\n         url('Sharis-Regular.svg#Sharis-Regular') format('svg'); /* Legacy iOS */\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    text-rendering: optimizeLegibility;\r\n}\r\n\r\n",".header {\n  position: fixed;\n  overflow: hidden;\n  width: 50vw;\n  height: 15vh;\n  transform: translateY(-15vh);\n  z-index: 4;\n  background-color: black;\n  color: white;\n  opacity: .9;\n  @include media(\"<=tablet\") {\n    width: 80vw;\n  }\n  .logo {\n    width: 45vw;\n    text-align: right;\n    @include media(\"<=tablet\") {\n      text-align: right;\n      width: 70%;\n    }\n    a {\n      font-size: 1.2rem;\n      letter-spacing: 0.5rem;\n      color: $black;\n      text-decoration: none;\n      font-weight: 500;\n    }\n  }\n}\n","$breakpoints: (\n  \"phone\": 425px,\n  \"tablet\": 768px,\n  \"desktop\": 1366px,\n  \"LGdesktop\": 1920px\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///\t\t'retina2x': (\n///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\n///\t\t\t'(min-resolution: 192dpi)'\n///\t\t)\n///\t);\n///\n$media-expressions: (\n  \"screen\": \"screen\",\n  \"print\": \"print\",\n  \"handheld\": \"handheld\",\n  \"retina2x\": (\n    \"(-webkit-min-device-pixel-ratio: 2)\",\n    \"(min-resolution: 192dpi)\"\n  ),\n  \"retina3x\": (\n    \"(-webkit-min-device-pixel-ratio: 3)\",\n    \"(min-resolution: 350dpi)\"\n  )\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media(\">128px\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media(\">20em\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media(\">2.0rem\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  \"px\": 1,\n  \"em\": 0.01,\n  \"rem\": 0.1\n) !default;\n///\n/// Generates a media query based on a list of conditions\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media(\">phone\") { }\n///\n/// @example scss - With two set breakpoints\n///  @include media(\">phone\", \"<=tablet\") { }\n///\n/// @example scss - With custom values\n///  @include media(\">=358px\", \"<850px\") { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media(\">desktop\", \"<=1350px\") { }\n///\n/// @example scss - With a static expression\n///  @include media(\"retina2x\") { }\n///\n/// @example scss - Mixing everything\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\n///\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth(\n      $conditions,\n      $i,\n      parse-expression(nth($conditions, $i))\n    );\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: \"\";\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + \", \";\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n\n///\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $expressions  - list of expressions\n///\n/// @throws `$expression` is not a valid expression\n///\n/// @return {List | Null}\n///\n@function get-query-branches($expressions) {\n  $result: \"\";\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (str-length($result) != 0) {\n      $result: $result + \" and \";\n    }\n\n    @if (type-of($expression) == \"string\") {\n      $result: $result + $expression;\n    } @else if (type-of($expression) == \"list\") {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (type-of($expression) == \"list\") {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join(\n                $result,\n                str-replace-first($first, $member, $partial)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n///\n/// Parses a string to form a media query expression\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $expression  - expression (in string)\n///\n/// @throws Expression with type `type-of($expression)` detected, string expected\n/// @throws `$expression` is missing an operator\n/// @throws Unknown unit: `$unit`\n///\n/// @return {String | Null}\n///\n@function parse-expression($expression) {\n  $operator: \"\";\n  $value: \"\";\n  $element: \"\";\n  $result: \"\";\n  $is-width: true;\n\n  @if (type-of($expression) != \"string\") {\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (str-slice($expression, 2, 2) == \"=\") {\n    $operator: str-slice($expression, 1, 2);\n    $value: str-slice($expression, 3);\n  } @else {\n    $operator: str-slice($expression, 1, 1);\n    $value: str-slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map-has-key($breakpoints, $value) {\n    $result: map-get($breakpoints, $value);\n  } @else if map-has-key($media-expressions, $expression) {\n    $result: map-get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: unit($result);\n    $interval: 0;\n\n    @if (map-has-key($unit-intervals, $unit)) {\n      $interval: map-get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    }\n\n    @if ($operator == \">\") {\n      $element: \"(min-width: #{$result + $interval})\";\n    } @else if ($operator == \"<\") {\n      $element: \"(max-width: #{$result - $interval})\";\n    } @else if ($operator == \">=\") {\n      $element: \"(min-width: #{$result})\";\n    } @else if ($operator == \"<=\") {\n      $element: \"(max-width: #{$result})\";\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n///\n/// Replaces the first occurence of the string with the replacement string\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $search  - The value being searched for\n/// @param {String}   $replace  - The replacement string\n/// @param {String}   $subject  - The string being replaced on\n///\n/// @return {String | Null}\n///\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n///\n/// Casts a number to a string\n///\n/// @author Hugo Giraudel\n///\n/// @param {String}   $string  - Number to be parsed\n///\n/// @return {List | Null}\n///\n@function to-number($string) {\n  // Matrices\n  $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\n  $numbers: 0 1 2 3 4 5 6 7 8 9;\n\n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n\n    @if $character == \"-\" {\n      $minus: true;\n    } @else if $character == \".\" {\n      $divider: 1;\n    } @else {\n      @if type-of($index) != \"number\" {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n\n      @if $divider == 0 {\n        $result: $result * 10;\n      } @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n\n      $result: $result + $number;\n    }\n  }\n\n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\n    \"vh\" \"vmin\" \"vmax\";\n  $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\n  $index: index($strings, $unit);\n\n  @if type-of($index) != \"number\" {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n\n  @return $number * nth($units, $index);\n}\n","$black: #000000;\n$white: #ffffff;\n$yellow: #fff3d8;\n",".main {\n  height: 100vh; //fallback option\n  height: calc(var(--vh, 1vh) * 100);\n  background-color: $white;\n  overflow: hidden;\n  .row {\n    flex-direction: column;\n    justify-content: center;\n    @include media(\"<=tablet\") {\n      justify-content: start;\n    }\n    h2 {\n      margin-top: 30vh;\n      font-size: 9vw;\n      font-weight: 100;\n      z-index: 10;\n      color: $white;\n      mix-blend-mode: difference;\n      @include media(\"<=tablet\") {\n        margin-top: 200px;\n        font-size: 8vw;\n      }\n      .line {\n        height: 9vw;\n        position: relative;\n        overflow: hidden;\n        @include media(\"<=tablet\") {\n          height: 8vw;\n        }\n        span {\n          position: absolute;\n        }\n      }\n    }\n    .btn-row {\n      background-color: $white;\n      opacity: 0.5;\n      width: 256px;\n      text-align: left;\n      position: relative;\n      z-index: 2;\n      font-family: \"Josefin Sans\", Arial, Helvetica, sans-serif;\n      @include media(\"<=tablet\") {\n        padding: 0px 20px;\n        width: 50vw;\n      }\n      p{\n        line-height: 1.4;\n      }\n    }\n    .case {\n      background: $black;\n      position: absolute;\n      width: 50vw;\n      height: 100vh;\n      float: right;\n      right: 0;\n      bottom: 0;\n      &:hover {\n        .case-image {\n          opacity: 0.9;\n        }\n      }\n      @include media(\"<=tablet\") {\n        width: 100vw;\n        height: 50vh;\n      }\n      .case-image {\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n        position: absolute;\n        opacity: 0.65;\n        transition: 0.4s cubic-bezier(0.6, -0.05, 0.1, 0.99);\n        img {\n          height: 100%;\n          width: 100%;\n          object-fit: cover;\n        }\n      }\n    }\n  }\n}\n","@import url(\"https://fonts.googleapis.com/css?family=Josefin+Sans:300,400,600,700&display=swap\");\n\n@import \"./fonts/sharis/Sharis-Regular.css\";\n\n@import \"./varibles.scss\";\n@import \"./breakpoints.scss\";\n@import \"./components/header.scss\";\n@import \"./components/banner.scss\";\n\nbody,\nhtml {\n  visibility: hidden;\n  user-select: none;\n  background: $white;\n  overscroll-behavior: none;\n  margin: 0;\n  font-family: \"Sharis\", -apple-system, BlinkMacSystemFont, \"Segoe UI\",\n    \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\",\n    \"Helvetica Neue\", sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.container {\n  width: 100vw;\n  min-width: 100vw;\n  margin: 0 auto;\n  height: 100%;\n  .row {\n    display: flex;\n    height: 100%;\n    padding: 0 32px;\n    @include media(\"<=tablet\") {\n      padding: 0 16px;\n    }\n  }\n  .v-center {\n    align-items: center;\n  }\n  .space-between {\n    justify-content: space-between;\n  }\n}\n\n.container-fluid {\n  width: 100%;\n  height: 100%;\n  .row {\n    display: flex;\n    height: 100%;\n  }\n}\n\n// intro overlay\n.intro-overlay {\n  .top {\n    overflow: hidden;\n    height: 100vh;\n    height: calc(var(--vh, 1vh) * 100);\n    position: absolute;\n    width: 100%;\n    z-index: 8;\n    .overlay-top {\n      position: absolute;\n      height: 100%;\n      width: 100vw;\n      background: $black;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n  }\n}\n\n.App {\n  z-index: 2;\n  transform: translateY(0);\n  position: relative;\n}\n\n.page {\n  height: 100vh;\n  width: 100%;\n  background: $white;\n  .row {\n    display: flex;\n    align-items: center;\n  }\n}\n"]}